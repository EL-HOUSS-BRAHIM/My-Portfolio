class ContactController{constructor(e="./src/api"){this.apiBaseUrl=e,this.form=document.getElementById("contactForm"),this.submitButton=null,this.responseContainer=document.getElementById("responseMessage"),this.isSubmitting=!1,this.init()}init(){this.form?(this.submitButton=this.form.querySelector('button[type="submit"]'),this.setupFormValidation(),this.setupFormSubmission(),this.setupFieldEvents(),console.debug("[ContactController] Initialized")):console.warn("[ContactController] Contact form not found")}setupFormValidation(){this.form.querySelectorAll("input, textarea").forEach((e=>{e.addEventListener("blur",(()=>this.validateField(e))),e.addEventListener("input",(()=>this.clearFieldError(e)))}))}setupFormSubmission(){this.form.addEventListener("submit",(e=>{e.preventDefault(),this.isSubmitting?console.debug("[ContactController] Form already submitting"):this.handleFormSubmission()}))}setupFieldEvents(){this.form.querySelectorAll("input, textarea").forEach((e=>{e.addEventListener("focus",(()=>{e.parentElement.classList.add("focused")})),e.addEventListener("blur",(()=>{e.parentElement.classList.remove("focused"),e.value.trim()?e.parentElement.classList.add("filled"):e.parentElement.classList.remove("filled")})),e.value.trim()&&e.parentElement.classList.add("filled")}))}async handleFormSubmission(){try{if(this.isSubmitting=!0,this.setSubmitButtonState(!0),this.clearAllErrors(),!this.validateForm())return void this.showMessage("Please correct the errors below.","error");const e=new FormData(this.form),t=this.form.action&&"#"!==this.form.action?this.form.action:`${this.apiBaseUrl}/contact.php`,s=await this.submitForm(t,e);await this.handleResponse(s)}catch(e){console.error("[ContactController] Form submission error:",e),this.showMessage(e.message||"An unexpected error occurred. Please try again.","error")}finally{this.isSubmitting=!1,this.setSubmitButtonState(!1)}}async submitForm(e,t){const s=await fetch(e,{method:"POST",body:t,headers:{"X-Requested-With":"XMLHttpRequest"}});if(!s.ok)throw new Error(`Network error: ${s.status} ${s.statusText}`);const r=await s.text();try{return JSON.parse(r)}catch(e){throw console.error("[ContactController] Invalid JSON response:",r),new Error("Invalid server response. Please try again later.")}}async handleResponse(e){if(e.success){this.showMessage(e.message||"Message sent successfully! I'll get back to you soon.","success"),this.form.reset(),this.clearAllFilledStates();const t=this.form.querySelector("input, textarea");t&&t.focus()}else e.errors&&this.displayFieldErrors(e.errors),this.showMessage(e.message||"Failed to send message. Please check your input and try again.","error")}validateForm(){const e=this.form.querySelectorAll("input[required], textarea[required]");let t=!0;return e.forEach((e=>{this.validateField(e)||(t=!1)})),t}validateField(e){const t=e.value.trim(),s=e.name;let r=!0,o="";if(e.required&&!t)r=!1,o="This field is required.";else if("email"===e.type&&t){/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)||(r=!1,o="Please enter a valid email address.")}else"name"===s&&t?t.length<2&&(r=!1,o="Name must be at least 2 characters long."):"message"===s&&t&&t.length<10&&(r=!1,o="Message must be at least 10 characters long.");return r?this.clearFieldError(e):this.setFieldError(e,o),r}setFieldError(e,t){const s=e.closest(".form-group");if(!s)return;s.classList.add("error");const r=s.querySelector(".error-message");r&&r.remove();const o=document.createElement("span");o.className="error-message",o.textContent=t,o.setAttribute("role","alert"),s.appendChild(o),e.setAttribute("aria-invalid","true"),e.setAttribute("aria-describedby","error-"+e.name),o.id="error-"+e.name}clearFieldError(e){const t=e.closest(".form-group");if(!t)return;t.classList.remove("error");const s=t.querySelector(".error-message");s&&s.remove(),e.removeAttribute("aria-invalid"),e.removeAttribute("aria-describedby")}clearAllErrors(){this.form.querySelectorAll(".form-group.error").forEach((e=>{const t=e.querySelector("input, textarea");t&&this.clearFieldError(t)}))}clearAllFilledStates(){this.form.querySelectorAll(".form-group").forEach((e=>{e.classList.remove("filled","focused")}))}displayFieldErrors(e){Object.keys(e).forEach((t=>{const s=this.form.querySelector(`[name="${t}"]`);s&&this.setFieldError(s,e[t])}))}setSubmitButtonState(e){if(this.submitButton)if(e){this.submitButton.disabled=!0,this.submitButton.classList.add("loading");const e=this.submitButton.querySelector("span");e&&(this.originalButtonText=e.textContent,e.textContent="Sending...")}else{this.submitButton.disabled=!1,this.submitButton.classList.remove("loading");const e=this.submitButton.querySelector("span");e&&this.originalButtonText&&(e.textContent=this.originalButtonText)}}showMessage(e,t="info"){if(this.responseContainer)this.responseContainer.textContent=e,this.responseContainer.className=`response-message response-message--${t}`,this.responseContainer.style.display="block",this.responseContainer.setAttribute("role","alert"),"success"===t&&setTimeout((()=>{this.responseContainer.style.display="none"}),5e3);else{const s=window.portfolioApp?.getModule("animations");s&&"function"==typeof s.showNotification?s.showNotification(e,t):console.info(`[ContactController] ${t.toUpperCase()}: ${e}`)}}getFormData(){const e=new FormData(this.form),t={};for(let[s,r]of e.entries())t[s]=r;return t}resetForm(){this.form.reset(),this.clearAllErrors(),this.clearAllFilledStates()}}
//# sourceMappingURL=contact.min.js.map